#lang racket

#|
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n-1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n-1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
|#

(define (tri n)
  (/ (* n (+ 1 n)) 2))

; P = 1.5n^2 - .5n
; 0 = 1.5n^2 - .5n - P
; By the quadratic formula,
; n = 0.5 + sqrt(0.25 + 6P)
; If n is an integer, P is pentagonal
(define (pentagonal? P)
  (integer? (/ (+ 0.5 (sqrt (+ 0.25 (* 6 P)))) 3)))

; H = 2n^2 - n
; 0 = 2n^2 - n - H
; By the quadratic formula,
; n = (1 + sqrt(1 + 8H))/4
; If n is an integer, H is hexagonal
(define (hexagonal? H)
  (integer? (/ (+ 1 (sqrt (+ 1 (* 8 H)))) 4)))

; Returns #t iff the nth triangle number is also pentagonal and hexagonal
(define (tripenthex? n)
  (let ([t (tri n)])
    (and (pentagonal? t) (hexagonal? t))))

(define (findnum n)
  (cond [(tripenthex? n) (tri n)]
        [else (findnum (+ 1 n))]))

(findnum 40756)